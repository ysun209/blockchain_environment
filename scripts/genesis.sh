#!/bin/bash

# Genesis generation script for Private Ethereum PoS network

set -e

# Source environment variables
if [ -f .env ]; then
    source .env
fi

# Default values
CHAIN_ID=${CHAIN_ID:-13371}
NETWORK_NAME=${NETWORK_NAME:-"private-pos"}
GENESIS_DIR=${GENESIS_DIR:-"./genesis"}
SECRETS_DIR="./secrets"
DATA_DIR=${DATA_DIR:-"./data"}

echo "üöÄ Generating genesis for $NETWORK_NAME (Chain ID: $CHAIN_ID)"

# Create directories
mkdir -p "$GENESIS_DIR/el"
mkdir -p "$GENESIS_DIR/cl"
mkdir -p "$SECRETS_DIR"
mkdir -p "$DATA_DIR/el"
mkdir -p "$DATA_DIR/cl"

# Generate JWT secret
echo "üìù Generating JWT secret..."
openssl rand -hex 32 > "$SECRETS_DIR/jwt.hex"

# Create password file for Geth
echo "password123" > "$SECRETS_DIR/password.txt"

# Generate EL genesis.json
echo "‚ö° Creating Execution Layer genesis..."
cat > "$GENESIS_DIR/genesis.json" << EOF
{
  "config": {
    "chainId": $CHAIN_ID,
    "homesteadBlock": 0,
    "eip150Block": 0,
    "eip155Block": 0,
    "eip158Block": 0,
    "byzantiumBlock": 0,
    "constantinopleBlock": 0,
    "petersburgBlock": 0,
    "istanbulBlock": 0,
    "berlinBlock": 0,
    "londonBlock": 0,
    "arrowGlacierBlock": 0,
    "grayGlacierBlock": 0,
    "mergeNetsplitBlock": 0,
    "shanghaiTime": 0,
    "cancunTime": 0,
    "terminalTotalDifficulty": 0,
    "terminalTotalDifficultyPassed": true,
    "ethash": {}
  },
  "nonce": "0x0",
  "timestamp": "0x$(printf '%x' $(date +%s))",
  "extraData": "0x0000000000000000000000000000000000000000000000000000000000000000",
  "gasLimit": "0x47b760",
  "difficulty": "0x1",
  "mixHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
  "coinbase": "0x0000000000000000000000000000000000000000",
  "alloc": {
    "8943545177806ED17B9F23F0a21ee5948eCaa776": {
      "balance": "0x200000000000000000000000000000000000000000000000000000000000"
    },
    "27eE006a4c4c81642b0cBdB1F0d21FbC3a05b777": {
      "balance": "0x200000000000000000000000000000000000000000000000000000000000"
    },
    "4242424242424242424242424242424242424242": {
      "balance": "0x0",
      "code": "0x60806040526004361061003f5760003560e01c806301ffc9a71461004457806322895118146100a4578063621fd130146101ba578063c5f2892f14610244575b600080fd5b34801561005057600080fd5b506100906004803603602081101561006757600080fd5b50357fffffffff000000000000000000000000000000000000000000000000000000001661026b565b604080519115158252519081900360200190f35b6101b8600480360360808110156100ba57600080fd5b8101906020810181356401000000008111156100d557600080fd5b8201836020820111156100e757600080fd5b8035906020019184600183028401116401000000008311171561010957600080fd5b91939092909160208101903564010000000081111561012757600080fd5b82018360208201111561013957600080fd5b8035906020019184600183028401116401000000008311171561015b57600080fd5b91939092909160208101903564010000000081111561017957600080fd5b82018360208201111561018b57600080fd5b803590602001918460018302840111640100000000831117156101ad57600080fd5b919350915035610304565b005b3480156101c657600080fd5b506101cf6110b5565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102095781810151838201526020016101f1565b50505050905090810190601f1680156102365780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561025057600080fd5b506102596110c7565b60408051918252519081900360200190f35b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a70000000000000000000000000000000000000000000000000000000014806102fe57507fffffffff0000000000000000000000000000000000000000000000000000000082167f8564090700000000000000000000000000000000000000000000000000000000145b92915050565b6030861461035d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806118056026913960400191505060405180910390fd5b602084146103b6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603681526020018061179c6036913960400191505060405180910390fd5b6060821461040f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001806118786029913960400191505060405180910390fd5b670de0b6b3a7640000341015610470576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806118526026913960400191505060405180910390fd5b6000606054146104cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603681526020018061183c6036913960400191505060405180910390fd5b633b9aca003a045fa52b16840668c004803b7db79734b30001606b5463f00026a4a5863f00032e2b89fb90fd5b50346004600082825401925050819055506000618b6e4300348f7d6b9b6b8f62c004dae1c704b83b001606b5463f00026a4a5863f00032e2b89fb90fd5b50346004600082825401925050819055506000618a6ed300348f7d6b9b6b8f62c004dae1c704b83b001606b5463f00026a4a5863f00032e2b89fb90fd"
    }
  },
  "number": "0x0",
  "gasUsed": "0x0",
  "parentHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
  "baseFeePerGas": "0x7"
}
EOF

# Initialize Geth datadir with genesis
echo "üîß Initializing Geth datadir..."
docker run --rm \
  -v "$(pwd)/$GENESIS_DIR:/genesis" \
  -v "$(pwd)/$DATA_DIR/el:/data" \
  ethereum/client-go:v1.13.4 \
  --datadir=/data init /genesis/genesis.json

# Generate CL config
echo "üåä Creating Consensus Layer configuration..."
cat > "$GENESIS_DIR/cl/config.yaml" << EOF
PRESET_BASE: mainnet
CONFIG_NAME: testnet

# Genesis
GENESIS_FORK_VERSION: 0x00000000
GENESIS_DELAY: $GENESIS_DELAY

# Altair
ALTAIR_FORK_VERSION: 0x01000000
ALTAIR_FORK_EPOCH: 0

# Bellatrix (merge)
BELLATRIX_FORK_VERSION: 0x02000000
BELLATRIX_FORK_EPOCH: 0

# Capella (Shanghai)
CAPELLA_FORK_VERSION: 0x03000000
CAPELLA_FORK_EPOCH: 0

# Deneb (Cancun)
DENEB_FORK_VERSION: 0x04000000
DENEB_FORK_EPOCH: 0

# Time parameters
SECONDS_PER_SLOT: 12
SLOTS_PER_EPOCH: 32
MIN_GENESIS_ACTIVE_VALIDATOR_COUNT: $MIN_GENESIS_ACTIVE_VALIDATOR_COUNT
MIN_GENESIS_TIME: $(date +%s)

# Deposit contract
DEPOSIT_CONTRACT_ADDRESS: 0x4242424242424242424242424242424242424242
DEPOSIT_CHAIN_ID: $CHAIN_ID
DEPOSIT_NETWORK_ID: $CHAIN_ID

# Terminal total difficulty
TERMINAL_TOTAL_DIFFICULTY: 0
TERMINAL_BLOCK_HASH: 0x0000000000000000000000000000000000000000000000000000000000000000
TERMINAL_BLOCK_HASH_ACTIVATION_EPOCH: 0

# Networking
GOSSIP_MAX_SIZE: 10485760
MAX_REQUEST_BLOCKS: 1024
EPOCHS_PER_SUBNET_SUBSCRIPTION: 256
MIN_EPOCHS_FOR_BLOCK_REQUESTS: 33024
EOF

# Create deposit_contract.txt
echo "0x4242424242424242424242424242424242424242" > "$GENESIS_DIR/cl/deposit_contract.txt"

# Create deploy_block.txt
echo "0" > "$GENESIS_DIR/cl/deploy_block.txt"

echo "‚úÖ Genesis configuration created successfully!"
echo ""
echo "üìÇ Files created:"
echo "  - $GENESIS_DIR/genesis.json (EL genesis)"
echo "  - $GENESIS_DIR/cl/config.yaml (CL config)"
echo "  - $SECRETS_DIR/jwt.hex (JWT secret)"
echo "  - $SECRETS_DIR/password.txt (Geth password)"
echo ""
echo "üîë Prefunded accounts:"
echo "  - 0x8943545177806ED17B9F23F0a21ee5948eCaa776"
echo "  - 0x27eE006a4c4c81642b0cBdB1F0d21FbC3a05b777"
echo ""
echo "‚ö†Ô∏è  Note: You still need to generate validator keys. Run:"
echo "    ./scripts/validators.sh"